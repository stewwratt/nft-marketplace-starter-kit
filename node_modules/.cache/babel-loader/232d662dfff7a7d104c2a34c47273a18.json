{"ast":null,"code":"import _toConsumableArray from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //modern browsers\n                // if there is a provider then lets console.log that its working and access \n                // the window from the doc to set Web3 to the provider\n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('No Ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, kryptoBirdAbi, address, contract, totalSupply, i, Kryptobird;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                kryptoBirdAbi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(kryptoBirdAbi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract);\n                _context3.next = 18;\n                return contract.methods.totalSupply().call();\n\n              case 18:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                console.log(this.state.totalSupply);\n                i = 1;\n\n              case 22:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                _context3.next = 25;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 25:\n                Kryptobird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [KryptoBird])\n                });\n\n              case 27:\n                i++;\n                _context3.next = 22;\n                break;\n\n              case 30:\n                _context3.next = 33;\n                break;\n\n              case 32:\n                window.alert('Smart contract not deployed');\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //with minting we are sending information and we need to specify the account\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"nav-item text-nowrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }, this.state.account)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 33\n        }\n      }, \"KryptoBirdz - NFT Marketplace\"), /*#__PURE__*/React.createElement(\"form\", {\n        onsubmit: function onsubmit(event) {\n          event.preventDefault();\n\n          _this2.mint(kryptoBird);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        value: this.kryptoBird,\n        type: \"text\",\n        placeholder: \"Add file location...\",\n        className: \"form-control mb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      }, \"MINT\")))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","state","net","getId","networkId","networkData","networks","kryptoBirdAbi","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","Kryptobird","alert","props","mint","kryptoBird","send","from","once","receipt","color","opacity","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nclass App extends Component {\n    \n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    //first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider()\n        \n        //modern browsers\n        // if there is a provider then lets console.log that its working and access \n        // the window from the doc to set Web3 to the provider\n        if (provider) {\n            console.log('Ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else {\n            console.log('No Ethereum wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({account: accounts})\n        console.log(this.state.account)\n        const networkId = await web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            const kryptoBirdAbi = KryptoBird.abi\n            const address = networkData.address\n            const contract = new web3.eth.Contract(kryptoBirdAbi, address)\n            this.setState({contract})\n            console.log(this.state.contract)\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n            console.log(this.state.totalSupply)\n\n            for(let i = 1; i <= totalSupply; i++){\n                const Kryptobird = await contract.methods.kryptoBirdz(i-1).call()\n                this.setState({\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n                })\n            }\n        } else {\n            window.alert('Smart contract not deployed')\n        }\n    }\n\n    //with minting we are sending information and we need to specify the account\n    mint = (kryptoBird) => {\n        this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n        .once('receipt', (receipt) => {\n            this.setState({\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n            })\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            kryptoBirdz: []\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className = 'navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className = 'navbar-brand col-sm-3 col-md-3 mr-0'\n                        style ={{color: 'white'}}>\n                        Krypto Birdz NFTs (Non Fungible Tokens)\n                    </div>\n                    <ul className = 'navbar-nav px-3'>\n                        <li className = 'nav-item text-nowrap'>\n                            <small className = 'text-white'>\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n\n                <div className = 'container-fluid mt-1'>\n                    <div className = 'row'>\n                        <main role = 'main' className = 'col-lg-12 d-flex text-center'>\n                            <div className = 'content mr-auto ml-auto' style = {{opacity: '0.8'}}>\n                                <h1 style = {{color: 'white'}}>\n                                    KryptoBirdz - NFT Marketplace\n                                </h1>\n                                <form onsubmit = {(event) => {\n                                    event.preventDefault()\n                                    this.mint(kryptoBird)\n                                }}>\n                                <input\n                                    value = {this.kryptoBird}\n                                    type = 'text'\n                                    placeholder = 'Add file location...'\n                                    className = 'form-control mb-1'\n                                />\n                                <button type = 'submit'>MINT</button>\n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}