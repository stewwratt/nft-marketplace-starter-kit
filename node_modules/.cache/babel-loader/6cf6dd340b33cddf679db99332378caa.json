{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //modern browsers\n                // if there is a provider then lets console.log that its working and access \n                // the window from the doc to set Web3 to the provider\n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('No Ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, kryptoBirdAbi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                networkId = web3.eth.net.getId();\n                networkData = KryptoBird.networks[networkId];\n\n                if (networkData) {\n                  kryptoBirdAbi = KryptoBird.abi();\n                  address = networkData.address;\n                  contract = new web3.eth.Contract(kryptoBirdAbi, address);\n                }\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"l\", {\n        className: \"nav-item text-nowrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","state","networkId","net","getId","networkData","networks","kryptoBirdAbi","abi","address","contract","Contract","props","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAEV;;;;;;;;;;;;uBAE2BJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AAEN;AACA;AACA;AACA,oBAAIA,QAAJ,EAAc;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd;AACH,iBAHD,MAGO;AACHC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AAIKE,gBAAAA,I,GAAOD,MAAM,CAACC,I;;uBACGA,IAAI,CAACC,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAAEF;AAAV,iBAAd;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKQ,KAAL,CAAWD,OAAvB;AACME,gBAAAA,S,GAAYP,IAAI,CAACC,GAAL,CAASO,GAAT,CAAaC,KAAb,E;AACZC,gBAAAA,W,GAAclB,UAAU,CAACmB,QAAX,CAAoBJ,SAApB,C;;AACpB,oBAAGG,WAAH,EAAgB;AACNE,kBAAAA,aADM,GACUpB,UAAU,CAACqB,GAAX,EADV;AAENC,kBAAAA,OAFM,GAEIJ,WAAW,CAACI,OAFhB;AAGRC,kBAAAA,QAHQ,GAGG,IAAIf,IAAI,CAACC,GAAL,CAASe,QAAb,CAAsBJ,aAAtB,EAAqCE,OAArC,CAHH;AAKf;;;;;;;;;;;;;;;;;;AAGL,eAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKX,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;6BAEQ;AACL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAG,gEAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAG,qCAAjB;AACI,QAAA,KAAK,EAAG;AAACa,UAAAA,KAAK,EAAE;AAAR,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,eAKI;AAAI,QAAA,SAAS,EAAG,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAG,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,SAAS,EAAG,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKZ,KAAL,CAAWD,OADhB,CADJ,CADJ,CALJ,CADJ,CADJ;AAiBH;;;;EA7DahB,S;;AAgElB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nclass App extends Component {\n    \n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    //first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider()\n        \n        //modern browsers\n        // if there is a provider then lets console.log that its working and access \n        // the window from the doc to set Web3 to the provider\n        if (provider) {\n            console.log('Ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else {\n            console.log('No Ethereum wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({account: accounts})\n        console.log(this.state.account)\n        const networkId = web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            const kryptoBirdAbi = KryptoBird.abi()\n            const address = networkData.address\n            let contract = new web3.eth.Contract(kryptoBirdAbi, address)\n            \n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: ''\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className = 'navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className = 'navbar-brand col-sm-3 col-md-3 mr-0'\n                        style ={{color: 'white'}}>\n                        Krypto Birdz NFTs (Non Fungible Tokens)\n                    </div>\n                    <ul className = 'navbar-nav px-3'>\n                        <l className = 'nav-item text-nowrap'>\n                            <small className = 'text-white'>\n                                {this.state.account}\n                            </small>\n                        </l>\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}