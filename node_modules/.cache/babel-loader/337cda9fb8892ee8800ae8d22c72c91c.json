{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //modern browsers\n                // if there is a provider then lets console.log that its working and access \n                // the window from the doc to set Web3 to the provider\n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('No Ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var networkId, networkData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                _context3.next = 4;\n                return web3.eth.net.getId();\n\n              case 4:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 9;\n                return this.createNewInstanceOfKryptoBirdContract();\n\n              case 9:\n                _context3.next = 12;\n                break;\n\n              case 11:\n                console.log('no network data');\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"createNewInstanceOfKryptoBirdContract\",\n    value: function () {\n      var _createNewInstanceOfKryptoBirdContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var kryptoBirdAbi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                kryptoBirdAbi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(kryptoBirdAbi, address);\n                console.log(contract.address);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function createNewInstanceOfKryptoBirdContract() {\n        return _createNewInstanceOfKryptoBirdContract.apply(this, arguments);\n      }\n\n      return createNewInstanceOfKryptoBirdContract;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"nav-item text-nowrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/joshua.stewart/Desktop/js.code/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","setState","account","accounts","state","eth","net","getId","networkId","networkData","networks","createNewInstanceOfKryptoBirdContract","kryptoBirdAbi","abi","address","contract","Contract","props","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAEV;;;;;;;;;;;;uBAE2BJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AAEN;AACA;AACA;AACA,oBAAIA,QAAJ,EAAc;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd;AACH,iBAHD,MAGO;AACHC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AAKD,qBAAKG,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAAEC;AAAV,iBAAd;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,KAAL,CAAWF,OAAvB;;uBACwBF,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAcjB,UAAU,CAACkB,QAAX,CAAoBF,SAApB,C;;qBACjBC,W;;;;;;uBACO,KAAKE,qCAAL,E;;;;;;;AAENd,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;;;;;;;;;;;;;;;;;;;;;;;;AAMEc,gBAAAA,a,GAAgBpB,UAAU,CAACqB,G;AAC3BC,gBAAAA,O,GAAUL,WAAW,CAACK,O;AACtBC,gBAAAA,Q,GAAW,IAAIf,IAAI,CAACK,GAAL,CAASW,QAAb,CAAsBJ,aAAtB,EAAqCE,OAArC,C;AACjBjB,gBAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAQ,CAACD,OAArB;;;;;;;;;;;;;;;;;;AAGJ,eAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKb,KAAL,GAAa;AACTF,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;6BAEQ;AACL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAG,gEAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAG,qCAAjB;AACI,QAAA,KAAK,EAAG;AAACgB,UAAAA,KAAK,EAAE;AAAR,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,eAKI;AAAI,QAAA,SAAS,EAAG,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAG,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,SAAS,EAAG,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKd,KAAL,CAAWF,OADhB,CADJ,CADJ,CALJ,CADJ,CADJ;AAiBH;;;;EAnEab,S;;AAsElB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nclass App extends Component {\n    \n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    //first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider()\n        \n        //modern browsers\n        // if there is a provider then lets console.log that its working and access \n        // the window from the doc to set Web3 to the provider\n        if (provider) {\n            console.log('Ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else {\n            console.log('No Ethereum wallet detected')\n        }\n    }\n\n    async loadBlockchainData() {\n        \n        this.setState({account: accounts})\n        console.log(this.state.account)\n        const networkId = await web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if(networkData) {\n            await this.createNewInstanceOfKryptoBirdContract()\n        } else {\n            console.log('no network data')\n\n        }\n    }\n\n    async createNewInstanceOfKryptoBirdContract() {\n        const kryptoBirdAbi = KryptoBird.abi\n        const address = networkData.address\n        const contract = new web3.eth.Contract(kryptoBirdAbi, address)\n        console.log(contract.address)\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: ''\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className = 'navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className = 'navbar-brand col-sm-3 col-md-3 mr-0'\n                        style ={{color: 'white'}}>\n                        Krypto Birdz NFTs (Non Fungible Tokens)\n                    </div>\n                    <ul className = 'navbar-nav px-3'>\n                        <li className = 'nav-item text-nowrap'>\n                            <small className = 'text-white'>\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}